;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name tripod.route, :imports nil, :requires {path tripod.path, tripod.path tripod.path, i tripod.interceptor, tripod.interceptor tripod.interceptor}, :uses nil, :defs {capture-constraints {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/route.cljc", :line 5, :column 8, :end-line 5, :end-column 27, :private true, :arglists (quote ([m]))}, :private true, :name tripod.route/capture-constraints, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/route.cljc", :end-column 27, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, update-dna {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/route.cljc", :line 8, :column 8, :end-line 8, :end-column 18, :private true, :arglists (quote ([{parent-path :path, :as parent-dna} {:keys [constraints interceptors path]}]))}, :private true, :name tripod.route/update-dna, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/route.cljc", :end-column 18, :method-params ([p__10210 p__10211]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{parent-path :path, :as parent-dna} {:keys [constraints interceptors path]}]))}, default-dna {:name tripod.route/default-dna, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/route.cljc", :line 18, :column 1, :end-line 18, :end-column 27, :private true, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/route.cljc", :line 18, :column 16, :end-line 18, :end-column 27, :private true}}, verify-unique-route-names {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/route.cljc", :line 23, :column 7, :end-line 23, :end-column 32, :arglists (quote ([route-table])), :doc "Each handler produces a route name and all of them must be unique"}, :name tripod.route/verify-unique-route-names, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/route.cljc", :end-column 32, :method-params ([route-table]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([route-table])), :doc "Each handler produces a route name and all of them must be unique"}, expand-verbose-routes {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/route.cljc", :line 36, :column 7, :end-line 36, :end-column 28, :arglists (quote ([routes] [routes accumulated-dna])), :doc "Convert verbose routes to a route table", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([routes] [routes accumulated-dna]), :arglists ([routes] [routes accumulated-dna]), :arglists-meta (nil nil)}}, :name tripod.route/expand-verbose-routes, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/route.cljc", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([routes] [routes accumulated-dna]), :arglists ([routes] [routes accumulated-dna]), :arglists-meta (nil nil)}, :method-params ([routes] [routes accumulated-dna]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists ([routes] [routes accumulated-dna]), :doc "Convert verbose routes to a route table"}, expand-terse-routes {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/route.cljc", :line 48, :column 7, :end-line 48, :end-column 26, :arglists (quote ([routes])), :doc "Convert terse routes to verbose routes"}, :name tripod.route/expand-terse-routes, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/route.cljc", :end-column 26, :method-params ([routes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([routes])), :doc "Convert terse routes to verbose routes"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:path :constraints :children :path-constraints :name :path-parts :non-unique-names :interceptors :route-name :handler}, :order [:path :constraints :interceptors :path-constraints :path-parts :route-name :non-unique-names :handler :children :name]}, :doc nil}