;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name tripod.core, :imports nil, :requires {log tripod.log, path tripod.path, router tripod.router, route tripod.route, tripod.context tripod.context, tripod.route tripod.route, tripod.log tripod.log, tripod.router tripod.router, tripod.path tripod.path, context tripod.context}, :uses nil, :defs {expand-routes {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :line 9, :column 7, :end-line 9, :end-column 20, :arglists (quote ([routes])), :doc "Creates a route table out of terse routes"}, :name tripod.core/expand-routes, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :end-column 20, :method-params ([routes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([routes])), :doc "Creates a route table out of terse routes"}, *path-for* {:name tripod.core/*path-for*, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :line 16, :column 1, :end-line 16, :end-column 36, :private true, :dynamic true, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :line 16, :column 26, :end-line 16, :end-column 36, :private true, :dynamic true}}, path-for {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :line 18, :column 7, :end-line 18, :end-column 15, :arglists (quote ([route-name & options])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(route-name options)], :arglists ([route-name & options]), :arglists-meta (nil)}}, :name tripod.core/path-for, :variadic true, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(route-name options)], :arglists ([route-name & options]), :arglists-meta (nil)}, :method-params [(route-name options)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists ([route-name & options])}, service {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :line 23, :column 7, :end-line 23, :end-column 14, :arglists (quote ([{:keys [:tripod.core/interceptors], :as service-map}])), :doc "Given a service-map returns a handler function that accepts a request and returns a response"}, :name tripod.core/service, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :end-column 14, :method-params ([p__10018]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:tripod.core/interceptors], :as service-map}])), :doc "Given a service-map returns a handler function that accepts a request and returns a response"}, router-interceptor {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :line 34, :column 7, :end-line 34, :end-column 25, :arglists (quote ([{:keys [:tripod.core/router :tripod.core/routes], :as service-map}]))}, :name tripod.core/router-interceptor, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :end-column 25, :method-params ([p__10023]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:tripod.core/router :tripod.core/routes], :as service-map}]))}, linker-interceptor {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :line 50, :column 7, :end-line 50, :end-column 25, :arglists (quote ([{:keys [:tripod.core/routes], :as service-map}]))}, :name tripod.core/linker-interceptor, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :end-column 25, :method-params ([p__10040]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:tripod.core/routes], :as service-map}]))}, logger-interceptor {:name tripod.core/logger-interceptor, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :line 59, :column 1, :end-line 59, :end-column 24, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :line 59, :column 6, :end-line 59, :end-column 24}}, default-interceptors {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :line 65, :column 7, :end-line 65, :end-column 27, :arglists (quote ([service-map]))}, :name tripod.core/default-interceptors, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/core.cljc", :end-column 27, :method-params ([service-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([service-map]))}}, :require-macros {log tripod.log, tripod.log tripod.log}, :cljs.analyzer/constants {:seen #{:response :routes :request :private :tripod.core/logger :ns :bindings :name tripod.core :file :end-column :route *path-for* :tripod.core/interceptors :column :enter :service-map :reason :dynamic :line :tripod.core/routes :not-found :path-for :info :end-line :tripod.core/router :uri :interceptors :tripod.core/linker :arglists :route-name :doc :test tripod.core/*path-for*}, :order [:routes :route-name :tripod.core/interceptors :service-map :response :request :tripod.core/router :tripod.core/routes :name :enter :uri :interceptors :reason :not-found :route :tripod.core/linker :bindings tripod.core/*path-for* :private :ns :file :end-column :column :dynamic :line :end-line :arglists :doc :test tripod.core *path-for* :path-for :tripod.core/logger :info]}, :doc nil}