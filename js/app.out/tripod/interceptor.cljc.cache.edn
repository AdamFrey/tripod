;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name tripod.interceptor, :imports nil, :requires {str clojure.string, clojure.string clojure.string}, :uses nil, :defs {Interceptor {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name tripod.interceptor/Interceptor, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :end-column 23, :type true, :column 12, :internal-ctor true, :line 4, :record true, :end-line 4, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Interceptor {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :line 4, :column 12, :end-line 4, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([name enter leave error]))}, :name tripod.interceptor/->Interceptor, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :end-column 23, :method-params ([name enter leave error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 4, :end-line 4, :max-fixed-arity 4, :fn-var true, :arglists (quote ([name enter leave error]))}, map->Interceptor {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :line 4, :column 12, :end-line 4, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__10283]))}, :name tripod.interceptor/map->Interceptor, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :end-column 23, :method-params ([G__10283]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__10283]))}, IntoInterceptor {:meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :line 6, :column 14, :end-line 6, :end-column 29, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-interceptor [[t]]}}}, :protocol-symbol true, :name tripod.interceptor/IntoInterceptor, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :end-column 29, :column 1, :line 6, :protocol-info {:methods {-interceptor [[t]]}}, :info nil, :end-line 6, :impls #{cljs/core.PersistentHashMap cljs/core.Var cljs/core.PersistentArrayMap tripod.interceptor/Interceptor function}, :doc nil, :jsdoc ("@interface")}, -interceptor {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :line 7, :column 4, :end-line 7, :end-column 16, :protocol tripod.interceptor/IntoInterceptor, :doc "Given a value, produce an Interceptor Record.", :arglists (quote ([t]))}, :protocol tripod.interceptor/IntoInterceptor, :name tripod.interceptor/-interceptor, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :end-column 16, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Given a value, produce an Interceptor Record."}, interceptor {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :line 82, :column 7, :end-line 82, :end-column 18, :arglists (quote ([t])), :doc "Given a value, produces and returns an Interceptor (Record)."}, :name tripod.interceptor/interceptor, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :end-column 18, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Given a value, produces and returns an Interceptor (Record)."}, interceptor-name {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :line 62, :column 7, :end-line 62, :end-column 23, :arglists (quote ([n]))}, :name tripod.interceptor/interceptor-name, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :end-column 23, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, interceptor? {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :line 68, :column 7, :end-line 68, :end-column 19, :arglists (quote ([o]))}, :name tripod.interceptor/interceptor?, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :end-column 19, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}, valid-interceptor? {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :line 72, :column 7, :end-line 72, :end-column 25, :arglists (quote ([o]))}, :name tripod.interceptor/valid-interceptor?, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/interceptor.cljc", :end-column 25, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:response t satisfies? :request if-not :ns :name :type :enter name valid-interceptor? :leave type enter ex-info :error :t leave throw IntoInterceptor error}, :order [:name :enter :leave :error name enter leave error :response :request :ns :t :type if-not satisfies? IntoInterceptor t throw ex-info type valid-interceptor?]}, :doc nil}