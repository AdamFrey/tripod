;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name tripod.context, :imports nil, :requires {log tripod.log, tripod.log tripod.log}, :uses nil, :defs {enqueue* {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 163, :column 7, :end-line 163, :end-column 15, :arglists (quote ([context interceptors])), :doc "Like 'enqueue' but the second argument is a sequence of interceptors\n  to add to the context's execution queue."}, :name tripod.context/enqueue*, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 15, :method-params ([context interceptors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context interceptors])), :doc "Like 'enqueue' but the second argument is a sequence of interceptors\n  to add to the context's execution queue."}, end {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 193, :column 8, :end-line 193, :end-column 11, :private true, :arglists (quote ([context]))}, :private true, :name tripod.context/end, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 11, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context]))}, check-terminators {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 67, :column 8, :end-line 67, :end-column 25, :private true, :arglists (quote ([context])), :doc "Invokes each predicate in ::terminators on context. If any predicate\n  returns true, removes ::queue from context."}, :private true, :name tripod.context/check-terminators, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 25, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context])), :doc "Invokes each predicate in ::terminators on context. If any predicate\n  returns true, removes ::queue from context."}, leave-all {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 142, :column 7, :end-line 142, :end-column 16, :arglists (quote ([context])), :doc "Establish the bindings present in `context` as thread local\n  bindings, and then invoke leave-all-with-binding. Conditionally\n  re-establish bindings if a change in bindings is made by an\n  interceptor."}, :name tripod.context/leave-all, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 16, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context])), :doc "Establish the bindings present in `context` as thread local\n  bindings, and then invoke leave-all-with-binding. Conditionally\n  re-establish bindings if a change in bindings is made by an\n  interceptor."}, try-error {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 42, :column 8, :end-line 42, :end-column 17, :private true, :arglists (quote ([context interceptor])), :doc "If error-fn is not nil, invokes it on context and the current ::error\n  from context."}, :private true, :name tripod.context/try-error, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 17, :method-params ([context interceptor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context interceptor])), :doc "If error-fn is not nil, invokes it on context and the current ::error\n  from context."}, with-bindings {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 80, :column 10, :end-line 80, :end-column 23, :arglists (quote ([_ res]))}, :name tripod.context/with-bindings, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 23, :method-params ([_ res]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ res]))}, exception->ex-info {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 11, :column 8, :end-line 11, :end-column 26, :private true, :arglists (quote ([exception execution-id interceptor stage]))}, :private true, :name tripod.context/exception->ex-info, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 26, :method-params ([exception execution-id interceptor stage]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 4, :fn-var true, :arglists (quote ([exception execution-id interceptor stage]))}, try-f {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 22, :column 8, :end-line 22, :end-column 13, :private true, :arglists (quote ([context interceptor stage])), :doc "If f is not nil, invokes it on context. If f throws an exception,\n  assoc's it on to context as ::error."}, :private true, :name tripod.context/try-f, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 13, :method-params ([context interceptor stage]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([context interceptor stage])), :doc "If f is not nil, invokes it on context. If f throws an exception,\n  assoc's it on to context as ::error."}, enter-all {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 108, :column 8, :end-line 108, :end-column 17, :private true, :arglists (quote ([context])), :doc "Establish the bindings present in `context` as thread local\n  bindings, and then invoke enter-all-with-binding. Conditionally\n  re-establish bindings if a change in bindings is made by an\n  interceptor."}, :private true, :name tripod.context/enter-all, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 17, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context])), :doc "Establish the bindings present in `context` as thread local\n  bindings, and then invoke enter-all-with-binding. Conditionally\n  re-establish bindings if a change in bindings is made by an\n  interceptor."}, queue {:name tripod.context/queue, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 5, :column 1, :end-line 5, :end-column 11, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 5, :column 6, :end-line 5, :end-column 11}}, terminate {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 169, :column 7, :end-line 169, :end-column 16, :arglists (quote ([context])), :doc "Removes all remaining interceptors from context's execution queue.\n  This effectively short-circuits execution of Interceptors' :enter\n  functions and begins executing the :leave functions."}, :name tripod.context/terminate, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 16, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context])), :doc "Removes all remaining interceptors from context's execution queue.\n  This effectively short-circuits execution of Interceptors' :enter\n  functions and begins executing the :leave functions."}, execute {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 198, :column 7, :end-line 198, :end-column 14, :arglists (quote ([context]))}, :name tripod.context/execute, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 14, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context]))}, enqueue {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 154, :column 7, :end-line 154, :end-column 14, :arglists (quote ([context & interceptors])), :doc "Adds interceptors to the end of context's execution queue. Creates\n  the queue if necessary. Returns updated context.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(context interceptors)], :arglists ([context & interceptors]), :arglists-meta (nil)}}, :name tripod.context/enqueue, :variadic true, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(context interceptors)], :arglists ([context & interceptors]), :arglists-meta (nil)}, :method-params [(context interceptors)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists ([context & interceptors]), :doc "Adds interceptors to the end of context's execution queue. Creates\n  the queue if necessary. Returns updated context."}, enter-all-with-binding {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 82, :column 8, :end-line 82, :end-column 30, :private true, :arglists (quote ([context])), :doc "Invokes :enter functions of all Interceptors on the execution\n  ::queue of context, saves them on the ::stack of context. Returns\n  updated context."}, :private true, :name tripod.context/enter-all-with-binding, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 30, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context])), :doc "Invokes :enter functions of all Interceptors on the execution\n  ::queue of context, saves them on the ::stack of context. Returns\n  updated context."}, begin {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 185, :column 8, :end-line 185, :end-column 13, :private true, :arglists (quote ([context]))}, :private true, :name tripod.context/begin, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 13, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context]))}, terminate-when {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 177, :column 7, :end-line 177, :end-column 21, :arglists (quote ([context pred])), :doc "Adds pred as a terminating condition of the context. pred is a\n  function that takes a context as its argument. It will be invoked\n  after every Interceptor's :enter function. If pred returns logical\n  true, execution will stop at that Interceptor."}, :name tripod.context/terminate-when, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 21, :method-params ([context pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context pred])), :doc "Adds pred as a terminating condition of the context. pred is a\n  function that takes a context as its argument. It will be invoked\n  after every Interceptor's :enter function. If pred returns logical\n  true, execution will stop at that Interceptor."}, leave-all-with-binding {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 120, :column 8, :end-line 120, :end-column 30, :private true, :arglists (quote ([context])), :doc "Unwinds the context by invoking :leave functions of Interceptors on\n  the ::stack of context. Returns updated context."}, :private true, :name tripod.context/leave-all-with-binding, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 30, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context])), :doc "Unwinds the context by invoking :leave functions of Interceptors on\n  the ::stack of context. Returns updated context."}, execution-id {:protocol-inline nil, :meta {:file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :line 7, :column 7, :end-line 7, :end-column 19, :arglists (quote ([]))}, :name tripod.context/execution-id, :variadic false, :file "/Users/frankie/.boot/cache/tmp/Users/frankie/Documents/frankiesardo/tripod/example/web/1qr/-s81pxz/js/app.out/tripod/context.cljc", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {log tripod.log, tripod.log tripod.log}, :cljs.analyzer/constants {:seen #{end :terminate? check-terminators leave-all :fn :stage :interceptor :else :bindings :name :trace :tripod.context/suppressed enter-all :type :enqueue :debug terminate :enter :tripod.context/terminators :tripod.context/error :rethrow :leave :tripod.context/execution-id :exception-type :context :throw :execution-id :error begin :suppressed :exception :skipped? :tripod.context/rebind :tripod.context/queue :in :tripod.context/stack}, :order [:execution-id :stage :interceptor :type :exception :name :tripod.context/execution-id :debug :throw :tripod.context/error :else :fn :skipped? :error :rethrow :suppressed :exception-type :tripod.context/suppressed :trace :tripod.context/terminators :in check-terminators :terminate? :tripod.context/queue enter-all :tripod.context/stack :context :bindings :enter :tripod.context/rebind leave-all :leave :enqueue terminate begin end]}, :doc nil}